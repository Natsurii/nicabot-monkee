#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Nekozilla is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Nekozilla is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Nekozilla.  If not, see <https://www.gnu.org/licenses/>.

"""
The time cards from SpongeBob.

List is generated by calling

    PATTERN='https://vignette\\.wikia.nocookie\\.net/spongebob/images.*?\\.jpg'
    i=0
    for image in $(curl spongebob.wikia.com/wiki/List_of_time_cards | grep -oP "${PATTERN}" | sort | uniq | xargs); do
        file_name="${i}.jpg"
        i=$((i+1))
        curl ${image} -o ${file_name}
    done
"""
import io
import os
import random

import aiofiles
import discord
from discord.ext import commands

from neko3 import errors
from neko3 import files
from neko3 import logging_utils
from neko3 import neko_commands
from neko3 import theme

images_directory = files.in_here("images")


class TimeCardsCog(neko_commands.Cog, logging_utils.Loggable):
    def __init__(self):
        self.images = [os.path.join(images_directory, file) for file in os.listdir(images_directory)]

        if not self.images:
            raise FileNotFoundError("No time_cards are present")

        self.logger.info("Found %s time_cards", len(self.images))

    @commands.cooldown(2, 60, commands.BucketType.user)
    @neko_commands.command(name="timecard", brief="10,000 years later...", aliases=["timecardd"])
    async def time_card_command(self, ctx):
        """Run timecardd to delete your invocation message."""
        try:
            if ctx.invoked_with == "timecardd":
                await ctx.message.delete()
            image_name = random.choice(self.images)
            async with aiofiles.open(image_name, "rb") as afp, ctx.typing():
                data = io.BytesIO(await afp.read())
                data.seek(0)

            embed = theme.generic_embed(ctx)
            embed.set_image(url="attachment://timecard.png")
            await ctx.send(file=discord.File(data, "timecard.png"), embed=embed)
        except Exception as ex:
            raise errors.CommandExecutionError(str(ex))


def setup(bot):
    bot.add_cog(TimeCardsCog())
